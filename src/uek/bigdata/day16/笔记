package和import机制

    作为包机制和导入机制，作业是为了便于管理大型软件系统中数目众多的类而设计了，它能解决类重名的问题。
    所以Java中引入了以上两种机制，从而提供类的多重命名空间。

    语法：
        1）作为package语句必须是Java源文件的第一条语句，如果缺少该语句，则指定为无名包
        2）包路径，对应着系统中的路径
        3）编译出来的.class文件必须位于正确的目录（和包路径一致）
        4）在不同的包路径下可以创建重名类
        5）import机制：当当前编写程序需要用到其他包路径下的类代码时，就使用import关键字类把需要的类导入到当前类中
        6）当需要引入和当前类重名的类时就不能使用import关键字，而是在代码中使用全限定名的方式来指定到底是哪个类

构造器
    1，构造方法也叫构造器，它属于一个特殊的方法，它的作用是：
        1）用于构造类的实例
        2）用来初始化对象的属性
    2，构造器的语法格式：
        [修饰符] 类名（形参列表） ｛
            代码块
        ｝
    3，在使用构造器来构建对象时的语法：
        类名 对象名 = new 构造器；
    4，构造器虽然有返回值，但是不能定义返回值类型，不能在构造器中调用return关键字
    5，如果在类的模板中没有定义构造器，则编译器会自动定义一个无参构造器，如果已经定义了，则编译器不再会添加
    6，构造器的方法名必须和类名一致
    7，构造器本身支持重载，可以有多个

static关键字
    1，static在Java中修饰的成员是属于类级别的，所有的对象共享一份（在构建对象时，类成员不会在对象内存中分配空间），
       类成员全部存储在静态方法区的静态域中。
    2，因为类成员的级别要比普通成员（对象的成员变量/成员方法）高，所以在用static修饰的方法中（类方法）不能调用非类成员。
    3，类成员（类变量、类方法）在类加载时就已经被初始化了
    4，在普通方法中可以调用类成员，因为在构建对象时，类成员就已经被初始化过了，所以在对象级别的普通成员中可以使用类成员。
    5,类成员的使用语法：
        1）类名.类变量    使用类名直接调用类成员
        2）对象名.类成员   使用对象名调用类成员
